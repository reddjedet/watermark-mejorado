import os
from PIL import Image, ImageDraw, ImageFont

def add_watermark_overlay(input_image_path, output_image_path, watermark_text):
    """
    Agrega una marca de agua de texto y líneas a una imagen,
    ajustando el tamaño del texto según el tamaño de la imagen.
    """
    try:
        input_image = Image.open(input_image_path).convert("RGBA")
        width, height = input_image.size

        overlay = Image.new("RGBA", input_image.size, (255, 255, 255, 0))
        draw = ImageDraw.Draw(overlay)

        # Dibujar líneas diagonales como marca de agua
        watermark_color_pattern = (0, 0, 0, 30)
        for i in range(0, width + height, 50):
            draw.line([(0, height - i), (i, height)], fill=watermark_color_pattern, width=5)

        # 2. Dibujar el texto de la marca de agua
        try:
            # Lógica para hacer el tamaño del texto dinámico
            font_size = 1
            font = ImageFont.truetype("arial.ttf", font_size)
            
            # Calcular el ancho objetivo del texto (e.g., 50% del ancho de la imagen)
            target_width = int(width * 0.5)

            # Aumentar el tamaño de la fuente hasta que el texto ocupe el 50% del ancho de la imagen
            while True:
                font = ImageFont.truetype("arial.ttf", font_size)
                text_bbox = draw.textbbox((0, 0), watermark_text, font=font)
                text_width = text_bbox[2] - text_bbox[0]
                
                if text_width > target_width:
                    break
                font_size += 1

        except IOError:
            print("Fuente 'arial.ttf' no encontrada. Usando la fuente predeterminada.")
            font = ImageFont.load_default()
            
        # Recalcular el tamaño del texto con la fuente final
        text_bbox = draw.textbbox((0, 0), watermark_text, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]

        x = (width - text_width) // 2
        y = (height - text_height) // 2
        
        watermark_color_text = (0, 0, 0, 30)
        
        draw.text((x, y), watermark_text, fill=watermark_color_text, font=font)

        watermarked_image = Image.alpha_composite(input_image, overlay)
        watermarked_image.save(output_image_path)
        print(f"Marca de agua agregada a '{input_image_path}'. Guardado como '{output_image_path}'")

    except FileNotFoundError:
        print(f"Error: No se encontró el archivo de imagen en la ruta '{input_image_path}'.")
    except Exception as e:
        print(f"Ocurrió un error inesperado al procesar '{input_image_path}': {e}")

# ---
# Ejemplo de uso del código corregido
# ---

input_folder = "Assets"
output_folder = "Assets/watermarkeadas"
watermark_text = "Quidel\nChristian"

if not os.path.exists(output_folder):
    os.makedirs(output_folder)

if os.path.exists(input_folder):
    for file in os.listdir(input_folder):
        if file.endswith((".jpg", ".png", ".jpeg")):
            input_path = os.path.join(input_folder, file)
            output_filename = f"watermarked_{os.path.splitext(file)[0]}.png"
            output_path = os.path.join(output_folder, output_filename)
            
            add_watermark_overlay(input_path, output_path, watermark_text)
else:
    print(f"Error: La carpeta '{input_folder}' no existe. Crea la carpeta y agrega tus imágenes.")
